[service]

# The 'scheduler' module refers to the task scheduler.  If this variable is not
# set to `scheduler`, the config manager will ignore the config file.
module = scheduler

[task_config]

# The 'task_name' variable appears in log messages, and must be unique.
# If two or more validated config files have the same `task_name`, the
# configuration described in the last file to be parsed supersedes all prior
# tasks with the same name.
task_name = hello_world

# The 'image_name' variable indicates the container image that is to be used
# when the task is run.
image = docker.io/halotools/notifyuser:v1

# The 'read_only' configuration setting refers to the root file system inside
# the task's running container.  Docker best practices say that we should
# use read-only containers whenever possible, and this is where you set that
# behavior for your running containers.
read_only = true

# The 'retry' setting indicates the number of times a task should be retried
# before failing.
retry = 5

[log_config]

# The following four items allow you to set custom messages for logging the
# various stages of task execution.
task_started = About to do the thing.
task_finished = Done doing the thing now.
task_retried = Try doing the thing again now.
task_failed = Failed to do the thing.

[schedule]

# This section maps to crontab configuration values.
minute = *
hour = *
day_of_week = *
day_of_month = *
month_of_year = *

[env_literal]

# The key-value pairs indicated in this section will be passed verbatim into
# the running container as environment variables.
ARG_1 = VAL_1

[env_expand]

# The key-value pairs in this section will be interpreted and expanded by
# the task dispatcher at execution time. The values in these key-value pairs
# will be replaced with the value of the environment variable from the
# environment of the task dispatcher.  This allows us to reference sensitive
# configuration items (like API keys and tokens) without embedding them in
# configuration files. For example, if we have an API token 'ABC123' set as
# an environment variable named 'SERVICE_TOKEN' in the task dispatcher's
# environment (running 'env' inside the dispatcher's container produces output
# that contains 'SERVICE_TOKEN=ABC123'), and we want the application within our
# containerized task to be able to access this variable under the name
# 'APP_SERVCE_TOKEN', we set a key-value pair in this section (env_expand)
# to 'APP_SERVICE_TOKEN = SERVICE_TOKEN'.  The dispatcher replaces
# 'SERVICE_TOKEN' with the environment variable 'SERVICE_TOKEN''s value, which
# you've configured as 'ABC123', and passes the environment variable
# 'APP_SERVICE_TOKEN=ABC123' into the container when it's instantiated and run.
API_KEY_1 = API_VAL_1
